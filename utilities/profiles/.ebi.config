process {
    memory = { 6.GB * task.attempt }
    time = { 2.hour * task.attempt }
    maxRetries = 3
    cache = 'lenient'
    errorStrategy = { ( task.exitStatus == 3 ) ? 'retry' : 'terminate' }
    afterScript = 'sleep 60'  // to avoid fail when using storeDir for missing output
    withLabel:'analysis_parser|cdd_runner|coils_runner|get_orfs|hmmer_runner|hmmer_2_runner|io|mls|prosite_pfscan_runner|prosite_pfsearch_runner|treegrafter_analysis|xref' {
        container = 'interproscan6.img'
        memory = { 6.GB * task.attempt }
        cpus = { 1 }
        time = { 2.hour * task.attempt }
        errorStrategy = { task.exitStatus in [104,137,140,143] && task.attempt <= 3 ? 'retry' : 'finish' }
    }
    withLabel:mobidblite_runner {
        container = 'idrpred.img'
        memory = { 6.GB * task.attempt }
        cpus = { 1 }
        time = { 2.hour * task.attempt }
        errorStrategy = { task.exitStatus in [104,137,140,143] && task.attempt <= 3 ? 'retry' : 'finish' }
    }
    withLabel:phobius_runner {
        container = 'phobius.img'
        memory = { 6.GB * task.attempt }
        cpus = { 1 }
        time = { 2.hour * task.attempt }
        errorStrategy = { task.exitStatus in [104,137,140,143] && task.attempt <= 3 ? 'retry' : 'finish' }
    }
    withLabel:prints_runner {
        container = 'interproscan6.img'
        memory = { 32.GB * task.attempt }
        cpus = { 2 }
        time = { 4.hour * task.attempt }
        errorStrategy = { task.exitStatus in [104,137,140,143] && task.attempt <= 3 ? 'retry' : 'finish' }
    }
    withLabel:signalp_runner {
        container = 'signalp6.img'
        memory = { 16.GB * task.attempt }
        cpus = { 1 }
        time = { 2.hour * task.attempt }
        errorStrategy = { task.exitStatus in [104,137,140,143] && task.attempt <= 3 ? 'retry' : 'finish' }
    }
}

executor {
    name = 'slurm'
    queueSize = 50
    submitRateLimit = '10/1sec'
    exitReadTimeout = '30 min'
    jobName = {
        task.name // [] and ' ' may not be allowed in job names
            .replace('[', '(')
            .replace(']', ')')
            .replace(' ', '_')
    }
    submitRateLimit = 100
    queueGlobalStatus = true
    docker.enabled = false
}

singularity {
    enabled = true
    pullTimeout = '3 hours' // the default is 20 minutes and fails with large images
}
