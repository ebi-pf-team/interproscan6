nextflow_process {

    name "Test Process FUNFAM_FILTER_MATCHES"
    script "interproscan/modules/hmmer/filter/main.nf"
    process "FUNFAM_FILTER_MATCHES"

    stage {
        symlink "interproscan/scripts/members/funfam/run_match_filtering.py"
        symlink "tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/funfam_2.40.30.40.cath.resolved.out"
        symlink "tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/hmmer_parsed_funfam_2.40.30.40.json"
        symlink "tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/funfam_3.40.50.1170.cath.resolved.out"
        symlink "tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/hmmer_parsed_funfam_3.40.50.1170.json"
    }

    test("Should run without failures") {

        when {
            params {}
            process {
                """
                input[0] = Channel.from(
                    file("meta/tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/hmmer_parsed_funfam_2.40.30.40.json"), 
                    file("meta/tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/hmmer_parsed_funfam_3.40.50.1170.json")
                )
                input[1] = Channel.from(
                    file("meta/tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/funfam_2.40.30.40.cath.resolved.out"), 
                    file("meta/tests/unit_tests/test_inputs/hmmer_filter_matches/funfam/funfam_3.40.50.1170.cath.resolved.out")
                )
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
