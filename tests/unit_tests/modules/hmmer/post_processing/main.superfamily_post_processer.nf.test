nextflow_process {

    name "Test Process SUPERFAMILY_POST_PROCESSER"
    script "interproscan/modules/hmmer/post_processing/main.nf"
    process "SUPERFAMILY_POST_PROCESSER"

    stage {
        symlink "tests/unit_tests/test_inputs/hmmer_runners/hmmer_runner_fasta.faa"
        symlink "tests/unit_tests/test_inputs/hmmscan_parser/hmmscan.out"
        symlink "tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/selfhits"
        symlink "tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/cla"
        symlink "tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/model_tab"
        symlink "tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/pdbj95d"
    }

    test("Should run without failures") {

        when {
            params {}
            process {
                """
                input[0] = file("meta/tests/unit_tests/test_inputs/hmmscan_parser/hmmscan.out")
                input[1] = [
                    "meta/bin/superfamily/ass3.pl",
                    "meta/tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/selfhits",
                    "meta/tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/cla",
                    "meta/tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/model_tab",
                    "meta/tests/unit_tests/test_inputs/hmmer_post_processing/superfamily/pdbj95d",
                    "binary-switches"
                ]
                input[2] = file("tests/unit_tests/test_inputs/hmmer_runners/hmmer_runner_fasta.faa")
                input[3] = true
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
