nextflow_process {

    name "Test Process XREFS"
    script "modules/xrefs/main.nf"
    process "XREFS"

    // use the minimal combined_matches.json as this does not contain Panther annotations
    stage {
        symlink "tests/data/channels/combined_matches_minimal.json"
        symlink "tests/data/channels/matches2xrefs.json"
        symlink "tests/data/databases/interpro/105.0"
    }

    test("Should run without failures") {

        when {
            params {
                db_releases = [
                    interpro: [version: "105.0", dirpath: "meta/tests/data/databases/interpro/105.0"],
                    antifam: [version: "8.0", dirpath: ""],
                    cathgene3d: [version: "4.3.0", dirpath: ""],
                    cathfunfam: [version: "4.3.0", dirpath: ""],
                    cdd: [version: "3.21", dirpath: ""],
                    hamap: [version: "2025_01", dirpath: ""],
                    ncbifam: [version: "17.0", dirpath: ""],
                    panther: [version: "19.0", dirpath: ""],
                    pfam: [version: "37.3", dirpath: ""],
                    pirsf: [version: "3.10", dirpath: ""],
                    pirsr: [version: "2025_01", dirpath: ""],
                    prints: [version: "42.0", dirpath: ""],
                    prositepatterns: [version: "2025_01", dirpath: ""],
                    prositeprofiles: [version: "2025_01", dirpath: ""],
                    sfld: [version: "4", dirpath: ""],
                    smart: [version: "9.0", dirpath: ""],
                    superfamily: [version: "1.75", dirpath: ""]
                ]
                add_goterms = true
                add_pathways = true
                panther_paint_dir = "meta/tests/data"
            }
            process {
                """
                input[0] = [1, file("meta/tests/data/channels/combined_matches_minimal.json")]
                input[1] = params.db_releases
                input[2] = params.add_goterms
                input[3] = params.add_pathways
                input[4] = params.panther_paint_dir
                """
            }
        }

        then {
            assert process.success
            // check we don't lose any matches
            def expected = "tests/data/channels/matches2xrefs_minimal.json"
            def observed = process.out.get(0).get(0).get(1)
            def cmd = "python3 tests/regression_tests/test_matches.py --format intermediate --expected ${expected} --observed ${observed} --summary --applications pfam,antifam"
            def process = cmd.execute()
            process.waitFor()
            def stdout = process.text.trim().readLines()
            assert stdout[1] == "Matches only in expected : 0"
            assert stdout[2] == "Matches only in observed : 0"
        }
    }

}
