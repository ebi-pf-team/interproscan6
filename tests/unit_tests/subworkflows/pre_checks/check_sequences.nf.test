nextflow_workflow {

    name "Test Subworkflow CHECK_SEQUENCES"
    script "interproscan/subworkflows/pre_checks/check_sequences.nf"
    workflow "CHECK_SEQUENCES"

    stage {
        symlink "interproscan/scripts/parse_sequence/parse_sequence.py"
        symlink "tests/unit_tests/test_inputs/parse_sequences/allowed.faa"
        symlink "tests/unit_tests/test_inputs/parse_sequences/nt_allowed.faa"
        symlink "tests/unit_tests/test_inputs/parse_sequences/illegal.faa"
        symlink "tests/unit_tests/test_inputs/parse_sequences/nt_illegal.faa"
    }

    test("Should run without failure on protein sequences") {

            when {
                params {
                    outdir="."
                }
                workflow {
                    """
                    input[0] = file("meta/tests/unit_tests/test_inputs/parse_sequences/allowed.faa")
                    input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                    input[2] = false
                    """
                }
            }

            then {
            assert workflow.success
            assert workflow.exitStatus == 0
            }
    }

    test("Should run without failure on nucleic sequences") {

            when {
                params {
                    outdir="."
                }
                workflow {
                    """
                    input[0] = file("meta/tests/unit_tests/test_inputs/parse_sequences/nt_allowed.faa")
                    input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                    input[2] = false
                    """
                }
            }

            then {
            assert workflow.success
            assert workflow.exitStatus == 0
            }
    }

    test("Should failure with illegal chars in protein sequences") {

            when {
                params {
                    outdir="."
                }
                workflow {
                    """
                    input[0] = file("meta/tests/unit_tests/test_inputs/parse_sequences/illegal.faa")
                    input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                    input[2] = false
                    """
                }
            }

            then {
            assert workflow.failed
            assert workflow.exitStatus == 22
            }
    }


    test("Should failure with illegal chars in nucleic acid sequences") {

            when {
                params {
                    outdir="."
                }
                workflow {
                    """
                    input[0] = file("meta/tests/unit_tests/test_inputs/parse_sequences/nt_illegal.faa")
                    input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                    input[2] = true
                    """
                }
            }

            then {
            assert workflow.failed
            assert workflow.exitStatus == 22
            }
    }

}