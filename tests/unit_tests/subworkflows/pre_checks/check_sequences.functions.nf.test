
nextflow_function {

    name "Test Functions"
    script "interproscan/subworkflows/pre_checks/check_sequences.nf"

	

    test("Test Function isNucleic with nucleic sequence") {

        function "isNucleic"

        when {
            function {
                """
                input[0] = "AGCTU"
                """
            }
        }

        then {
            assert function.success
            assert snapshot(function.result).match()
        }

    }



    test("Test Function isNucleic with protein sequence") {

        function "isNucleic"

        when {
            function {
                """
                input[0] = "THISisAProteinSequence"
                """
            }
        }

        then {
            assert function.success
            assert snapshot(function.result).match()
        }

    }

	

    test("Test Function checkIllegalChars when no illegal chars with a protein sequence") {

        function "checkIllegalChars"

        when {
            function {
                """
                input[0] = "ADEFGHIKLMN"
                input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                input[2] = false
                """
            }
        }

        then {
            assert function.success
            assert snapshot(function.result).match()
        }

    }


    test("Test Function checkIllegalChars when no illegal chars with a protein sequence but thinks its nucleic") {

        function "checkIllegalChars"

        when {
            function {
                """
                input[0] = "ADEFGHIKLMN"
                input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                input[2] = true
                """
            }
        }

        then {
            assert function.success
            assert snapshot(function.result).match()
        }

    }

	
    test("Test Function checkIllegalChars when there are illegal chars in a protein seq") {

        function "checkIllegalChars"

        when {
            function {
                """
                input[0] = "ADEFGHIKLMN-.,123"
                input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                input[2] = false
                """
            }
        }

        then {
            assert function.success
            assert snapshot(function.result).match()
        }

    }

    test("Test Function checkIllegalChars when there are illegal chars in a nucleic seq") {

        function "checkIllegalChars"

        when {
            function {
                """
                input[0] = "AGCTU-.,12_.3"
                input[1] = 'antifam,sfld'.toLowerCase().split(',') as Set
                input[2] = true
                """
            }
        }

        then {
            assert function.success
            assert snapshot(function.result).match()
        }

    }

}
